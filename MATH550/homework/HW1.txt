> #### 2.1
> ## a)
> getwd()
[1] "/home/thomas/git/datascience/MSDataSci/MATH550/homework"
> setwd('/home/thomas/git/datascience/MSDataSci/MATH550/homework')
> broadway <- read.csv('../data/playbill.csv')
> broadway
                 Production CurrentWeek LastWeek
1               42nd Street      684966   695437
2                  Avenue Q      502367   498969
3          Beauty and Beast      594474   598576
4             Bombay Dreams      529298   528994
5                   Chicago      570254   562964
6                   Dracula      319959   282778
7       Fiddler on the Roof      579126   583177
8             Forever Tango      134042   152833
9           Golda's Balcony      105853   105698
10                Hairspray      822775   836959
11               Mamma Mia!      949462   970190
12               Movin' Out      610007   651808
13                     Rent      386797   378238
14            The Lion King     1133034  1113510
15 The Phantom of the Opera      627609   614246
16            The Producers      911727   933822
17                   Wicked     1180266  1202536
18           Wonderful Town      479155   488624
> CurrentWeek <- broadway$CurrentWeek
> LastWeek <- broadway$LastWeek
> num_rows <-nrow(broadway)
> fit <- lm(formula = CurrentWeek ~ LastWeek)
> summary <- summary(fit)
> summary

Call:
lm(formula = CurrentWeek ~ LastWeek)

Residuals:
   Min     1Q Median     3Q    Max 
-36926  -7525  -2581   7782  35443 

Coefficients:
             Estimate Std. Error t value Pr(>|t|)    
(Intercept) 6.805e+03  9.929e+03   0.685    0.503    
LastWeek    9.821e-01  1.443e-02  68.071   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 18010 on 16 degrees of freedom
Multiple R-squared:  0.9966,    Adjusted R-squared:  0.9963 
F-statistic:  4634 on 1 and 16 DF,  p-value: < 2.2e-16

> qt <- qt(0.975, df = num_rows - 2)
> qt
[1] 2.119905
> B_1_hat <- coefficients(summary)["LastWeek", "Estimate"]
> B_1_hat
[1] 0.9820815
> B_1_error <- coefficients(summary)["LastWeek", "Std. Error"]
> B_1_error
[1] 0.01442723
> error <- qt * B_1_error
> error
[1] 0.03058435
> lower = B_1_hat - error
> upper = B_1_hat + error
> lower
[1] 0.9514971
> upper
[1] 1.012666
> ## b)
> B_0_null = 10000
> B_0_hat <- coefficients(summary)["(Intercept)", "Estimate"]
> B_0_error <- coefficients(summary)["(Intercept)", "Std. Error"]
> t <- ( B_0_hat - B_0_null ) / B_0_error
> t
[1] -0.3217858
> pt <- pt(q = t, df = num_rows-2)
> ts_test <- 2*pt
> ts_test
[1] 0.7517807
> ## c)
> x_new <- 400000
> predict(object = fit, data.frame(LastWeek = x_new), interval = "prediction")
       fit      lwr      upr
1 399637.5 359832.8 439442.2
> invoices <- read.table('../data/invoices.txt', header=TRUE)
> invoices
   Day Invoices Time
1    1      149  2.1
2    2       60  1.8
3    3      188  2.3
4    4       23  0.8
5    5      201  2.7
6    6       58  1.0
7    7       77  1.7
8    8      222  3.1
9    9      181  2.8
10  10       30  1.0
11  11      110  1.5
12  12       83  1.2
13  13       60  0.8
14  14       25  1.0
15  15      173  2.0
16  16      169  2.5
17  17      190  2.9
18  18      233  3.4
19  19      289  4.1
20  20       45  1.2
21  21      193  2.5
22  22       70  1.8
23  23      241  3.8
24  24      103  1.5
25  25      163  2.8
26  26      120  2.5
27  27      201  3.3
28  28      135  2.0
29  29       80  1.7
30  30       29  1.5
> Time <- invoices$Time
> Invoices <- invoices$Invoices
> num_rows <- nrow(invoices)
> invoices_fit <- lm(formula = Time ~ Invoices)
> invoices_summary <- summary(invoices_fit)
> confint(invoices_fit)[1,]
    2.5 %    97.5 % 
0.3912496 0.8921701 
> B_1_hat <- coefficients(invoices_summary)["Invoices", "Estimate"]
> B_1_error <- coefficients(invoices_summary)["Invoices", "Std. Error"]
> B_1_null = 0.01
> inv_t <- ( B_1_hat - B_1_null ) / B_1_error
> inv_t
[1] 1.578251
> inv_pt <- pt(q = inv_t, lower.tail = FALSE, df = num_rows - 2)
> inv_ts_test <- 2*inv_pt
> inv_ts_test
[1] 0.1257402
> inv_prediction <- predict(invoices_fit, newdata = data.frame(Invoices = 130), 
+         interval = "prediction", level = 0.95)
> inv_prediction
       fit      lwr    upr
1 2.109624 1.422947 2.7963